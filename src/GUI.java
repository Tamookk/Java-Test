package assignment;

import java.awt.*;
import javax.swing.*;
import java.text.SimpleDateFormat;
import java.util.*;


public class GUI extends JFrame
{
    static ArrayList<Card> cards = new ArrayList<>();
    static ArrayList<MultiCard> multicards = new ArrayList<>();
    
    // Creates new form GUI
    public GUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp1 = new javax.swing.JPanel();
        mainTabPane = new javax.swing.JTabbedPane();
        singleCardPanel = new javax.swing.JPanel();
        singleTabPane = new javax.swing.JTabbedPane();
        createCard = new javax.swing.JPanel();
        createCardLabel = new javax.swing.JLabel();
        createCardList = new javax.swing.JComboBox<>();
        createCardTextField = new javax.swing.JTextField();
        createCardButton = new javax.swing.JButton();
        loadCard = new javax.swing.JPanel();
        loadCardLabel = new javax.swing.JLabel();
        loadCardList = new javax.swing.JComboBox<>();
        loadCardTextField = new javax.swing.JTextField();
        loadCardButton = new javax.swing.JButton();
        convertCurrency = new javax.swing.JPanel();
        makePurchase = new javax.swing.JPanel();
        makePurchaseLabel = new javax.swing.JLabel();
        makePurchaseCardList = new javax.swing.JComboBox<>();
        makePurchaseCountryTF = new javax.swing.JTextField();
        makePurchaseCurrencyList = new javax.swing.JComboBox<>();
        makePurchaseAmountTF = new javax.swing.JTextField();
        makePurchaseDescriptionTF = new javax.swing.JTextField();
        makePurchaseButton = new javax.swing.JButton();
        purchaseHistory = new javax.swing.JPanel();
        purchaseHistoryLabel = new javax.swing.JLabel();
        purchaseHistoryList = new javax.swing.JComboBox<>();
        purchaseHistoryButton = new javax.swing.JButton();
        purchaseHistoryTextPane = new javax.swing.JScrollPane();
        purchaseHistoryTextArea = new javax.swing.JTextArea();
        totalByCountrySingle = new javax.swing.JPanel();
        showValueSingle = new javax.swing.JPanel();
        allCardsPanel = new javax.swing.JPanel();
        multiTabPane = new javax.swing.JTabbedPane();
        showValueAll = new javax.swing.JPanel();
        totalByCurrency = new javax.swing.JPanel();
        totalByCountryAll = new javax.swing.JPanel();
        listAllCards = new javax.swing.JPanel();

        javax.swing.GroupLayout sp1Layout = new javax.swing.GroupLayout(sp1);
        sp1.setLayout(sp1Layout);
        sp1Layout.setHorizontalGroup(
            sp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );
        sp1Layout.setVerticalGroup(
            sp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        mainTabPane.setPreferredSize(new java.awt.Dimension(775, 600));

        createCardLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        createCardLabel.setText("Create A New Card");

        createCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card Type...", "Basic Card", "Multi Card" }));

        createCardTextField.setText("Name");

        createCardButton.setText("Create Card");
        createCardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createCardButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout createCardLayout = new javax.swing.GroupLayout(createCard);
        createCard.setLayout(createCardLayout);
        createCardLayout.setHorizontalGroup(
            createCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createCardLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(createCardLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createCardLayout.createSequentialGroup()
                .addContainerGap(234, Short.MAX_VALUE)
                .addGroup(createCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createCardTextField)
                    .addComponent(createCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        createCardLayout.setVerticalGroup(
            createCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createCardLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(createCardLabel)
                .addGap(73, 73, 73)
                .addComponent(createCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createCardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createCardButton)
                .addContainerGap(293, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Create Card", createCard);

        loadCardLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        loadCardLabel.setText("Load a Card");

        loadCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        loadCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loadCardListMouseEntered(evt);
            }
        });

        loadCardTextField.setText("Amount");

        loadCardButton.setText("Load Funds");
        loadCardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadCardButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout loadCardLayout = new javax.swing.GroupLayout(loadCard);
        loadCard.setLayout(loadCardLayout);
        loadCardLayout.setHorizontalGroup(
            loadCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadCardLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadCardLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadCardLayout.createSequentialGroup()
                .addContainerGap(234, Short.MAX_VALUE)
                .addGroup(loadCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loadCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadCardTextField)
                    .addComponent(loadCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        loadCardLayout.setVerticalGroup(
            loadCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadCardLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(loadCardLabel)
                .addGap(73, 73, 73)
                .addComponent(loadCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadCardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadCardButton)
                .addContainerGap(293, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Load Card", loadCard);

        javax.swing.GroupLayout convertCurrencyLayout = new javax.swing.GroupLayout(convertCurrency);
        convertCurrency.setLayout(convertCurrencyLayout);
        convertCurrencyLayout.setHorizontalGroup(
            convertCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        convertCurrencyLayout.setVerticalGroup(
            convertCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        singleTabPane.addTab("Convert Currency", convertCurrency);

        makePurchaseLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        makePurchaseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        makePurchaseLabel.setText("Make a Purchase");

        makePurchaseCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        makePurchaseCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                makePurchaseCardListMouseEntered(evt);
            }
        });

        makePurchaseCountryTF.setText("Country");

        makePurchaseCurrencyList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Currency...", "AUD", "USD", "NZD", "GBP", "JPY", "CAD", "EUR" }));

        makePurchaseAmountTF.setText("Amount");

        makePurchaseDescriptionTF.setText("Description");

        makePurchaseButton.setText("Make Purchase");
        makePurchaseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                makePurchaseButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout makePurchaseLayout = new javax.swing.GroupLayout(makePurchase);
        makePurchase.setLayout(makePurchaseLayout);
        makePurchaseLayout.setHorizontalGroup(
            makePurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(makePurchaseLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(makePurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(makePurchaseCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(makePurchaseCountryTF)
                    .addComponent(makePurchaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(makePurchaseAmountTF)
                    .addComponent(makePurchaseCurrencyList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(makePurchaseDescriptionTF))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(makePurchaseLayout.createSequentialGroup()
                .addContainerGap(275, Short.MAX_VALUE)
                .addComponent(makePurchaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(276, Short.MAX_VALUE))
        );
        makePurchaseLayout.setVerticalGroup(
            makePurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(makePurchaseLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(makePurchaseLabel)
                .addGap(73, 73, 73)
                .addComponent(makePurchaseCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseCountryTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseCurrencyList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseDescriptionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseButton)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Make Purchase", makePurchase);

        purchaseHistoryLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        purchaseHistoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        purchaseHistoryLabel.setText("See Purchase History");

        purchaseHistoryList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        purchaseHistoryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                purchaseHistoryListMouseEntered(evt);
            }
        });

        purchaseHistoryButton.setText("Get Purchase History");
        purchaseHistoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseHistoryButtonMouseClicked(evt);
            }
        });

        purchaseHistoryTextArea.setColumns(20);
        purchaseHistoryTextArea.setRows(5);
        purchaseHistoryTextPane.setViewportView(purchaseHistoryTextArea);

        javax.swing.GroupLayout purchaseHistoryLayout = new javax.swing.GroupLayout(purchaseHistory);
        purchaseHistory.setLayout(purchaseHistoryLayout);
        purchaseHistoryLayout.setHorizontalGroup(
            purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, purchaseHistoryLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(purchaseHistoryLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(purchaseHistoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(purchaseHistoryLayout.createSequentialGroup()
                        .addGroup(purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(purchaseHistoryTextPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(purchaseHistoryList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(purchaseHistoryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(234, 234, 234))))
        );
        purchaseHistoryLayout.setVerticalGroup(
            purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(purchaseHistoryLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(purchaseHistoryLabel)
                .addGap(73, 73, 73)
                .addComponent(purchaseHistoryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(purchaseHistoryButton)
                .addGap(18, 18, 18)
                .addComponent(purchaseHistoryTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Purchase History", purchaseHistory);

        javax.swing.GroupLayout totalByCountrySingleLayout = new javax.swing.GroupLayout(totalByCountrySingle);
        totalByCountrySingle.setLayout(totalByCountrySingleLayout);
        totalByCountrySingleLayout.setHorizontalGroup(
            totalByCountrySingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        totalByCountrySingleLayout.setVerticalGroup(
            totalByCountrySingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        singleTabPane.addTab("Total Spent by Country", totalByCountrySingle);

        javax.swing.GroupLayout showValueSingleLayout = new javax.swing.GroupLayout(showValueSingle);
        showValueSingle.setLayout(showValueSingleLayout);
        showValueSingleLayout.setHorizontalGroup(
            showValueSingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        showValueSingleLayout.setVerticalGroup(
            showValueSingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        singleTabPane.addTab("Show Value", showValueSingle);

        javax.swing.GroupLayout singleCardPanelLayout = new javax.swing.GroupLayout(singleCardPanel);
        singleCardPanel.setLayout(singleCardPanelLayout);
        singleCardPanelLayout.setHorizontalGroup(
            singleCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(singleCardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(singleTabPane)
                .addContainerGap())
        );
        singleCardPanelLayout.setVerticalGroup(
            singleCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(singleCardPanelLayout.createSequentialGroup()
                .addComponent(singleTabPane)
                .addContainerGap())
        );

        mainTabPane.addTab("Single Card", singleCardPanel);

        javax.swing.GroupLayout showValueAllLayout = new javax.swing.GroupLayout(showValueAll);
        showValueAll.setLayout(showValueAllLayout);
        showValueAllLayout.setHorizontalGroup(
            showValueAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        showValueAllLayout.setVerticalGroup(
            showValueAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        multiTabPane.addTab("Total Value", showValueAll);

        javax.swing.GroupLayout totalByCurrencyLayout = new javax.swing.GroupLayout(totalByCurrency);
        totalByCurrency.setLayout(totalByCurrencyLayout);
        totalByCurrencyLayout.setHorizontalGroup(
            totalByCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        totalByCurrencyLayout.setVerticalGroup(
            totalByCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        multiTabPane.addTab("Total by Currency", totalByCurrency);

        javax.swing.GroupLayout totalByCountryAllLayout = new javax.swing.GroupLayout(totalByCountryAll);
        totalByCountryAll.setLayout(totalByCountryAllLayout);
        totalByCountryAllLayout.setHorizontalGroup(
            totalByCountryAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        totalByCountryAllLayout.setVerticalGroup(
            totalByCountryAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        multiTabPane.addTab("Total Spent by Country", totalByCountryAll);

        javax.swing.GroupLayout listAllCardsLayout = new javax.swing.GroupLayout(listAllCards);
        listAllCards.setLayout(listAllCardsLayout);
        listAllCardsLayout.setHorizontalGroup(
            listAllCardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        listAllCardsLayout.setVerticalGroup(
            listAllCardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        multiTabPane.addTab("List All Cards", listAllCards);

        javax.swing.GroupLayout allCardsPanelLayout = new javax.swing.GroupLayout(allCardsPanel);
        allCardsPanel.setLayout(allCardsPanelLayout);
        allCardsPanelLayout.setHorizontalGroup(
            allCardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allCardsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(multiTabPane)
                .addContainerGap())
        );
        allCardsPanelLayout.setVerticalGroup(
            allCardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multiTabPane)
        );

        mainTabPane.addTab("All Cards", allCardsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Method to create a card when button clicked
    private void createCardButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createCardButtonMouseClicked
        // Check if all fields have correct information in them
        if(createCardList.getSelectedIndex() != 0)
        {
            if(createCardTextField.getText().equals("Name") || 
               createCardTextField.getText().equals(""))
            {
                createCardLabel.setText("Please enter a card name.");
                return;
            }
        }
        else
        {
            createCardLabel.setText("Please select a card type.");
            return;
        }
        
        // Create a card based upon the selected card type in the combo box
        if(createCardList.getSelectedIndex() == 1)
        {
            BasicCard bc = new BasicCard("C001", createCardTextField.getText());
            createCardLabel.setText("Card successfully created!");
            cards.add(bc);
        }
        else
        {
            MultiCard mc = new MultiCard("C001", createCardTextField.getText());
            createCardLabel.setText("Card successfully created!");
            cards.add(mc);
            multicards.add(mc);
        }
        
        // Set the text field and combo box back to their original values
        createCardList.setSelectedIndex(0);
        createCardTextField.setText("Name");
    }//GEN-LAST:event_createCardButtonMouseClicked

    // Method to add funds to a card when button clicked
    private void loadCardButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadCardButtonMouseClicked
        // Check if the fields have been filled out correctly
        if(loadCardList.getSelectedIndex() == 0)
        {
            loadCardLabel.setText("Please select a card.");
            return;
        }
        else
        {
            if(loadCardTextField.getText().equals("Amount") || 
               loadCardTextField.getText().equals(""))
            {
                loadCardLabel.setText("Please enter amount.");
                return;
            }
        }
        
        // Try to convert the entered amount to a double
        double amount = 0;
        try
        {
            amount = Double.parseDouble(loadCardTextField.getText());
        }
        catch(Exception e)
        {
            loadCardLabel.setText("Amount entered not valid!");
            return;
        }
        
        // Load the card with the given amount
        cards.get(loadCardList.getSelectedIndex() - 1).addFunds(amount);
        loadCardLabel.setText("Funds successfully added!");
        
        // Reset the fields to their default values
        loadCardTextField.setText("Amount");
        loadCardList.setSelectedIndex(0);
    }//GEN-LAST:event_loadCardButtonMouseClicked

    // Set the card list for adding funds
    private void loadCardListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadCardListMouseEntered
        loadCardList.setModel(getCardList());
    }//GEN-LAST:event_loadCardListMouseEntered

    // Set the card list for making a purchase
    private void makePurchaseCardListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makePurchaseCardListMouseEntered
        makePurchaseCardList.setModel(getCardList());
    }//GEN-LAST:event_makePurchaseCardListMouseEntered

    // Make a purchase
    private void makePurchaseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makePurchaseButtonMouseClicked
        // Check if the fields are filled in correctly
        if(makePurchaseCardList.getSelectedIndex() == 0)
        {
            makePurchaseLabel.setText("Please select a card.");
            return;
        }
        
        if(makePurchaseCountryTF.getText().equals("Country") || 
           makePurchaseCountryTF.getText().equals(""))
        {
            makePurchaseLabel.setText("Please enter country.");
            return;
        }
        
        if(makePurchaseCurrencyList.getSelectedIndex() == 0)
        {
            makePurchaseLabel.setText("Please select a currency.");
            return;
        }
        
        if(makePurchaseAmountTF.getText().equals("Amount") || 
           makePurchaseAmountTF.getText().equals(""))
        {
            makePurchaseLabel.setText("Please enter amount.");
            return;
        }
        
        if(makePurchaseDescriptionTF.getText().equals("Description") || 
           makePurchaseDescriptionTF.getText().equals(""))
        {
            makePurchaseLabel.setText("Please enter description.");
            return;
        }
        
        // Try to convert the entered amount to a double
        double amount = 0;
        try
        {
            amount = Double.parseDouble(makePurchaseAmountTF.getText());
        }
        catch(Exception e)
        {
            makePurchaseLabel.setText("Amount entered not valid!");
            return;
        }
        
        // Check if the selected currency is in the card
        if(!cards.get(makePurchaseCardList.getSelectedIndex() - 1).getTotalOfEachCurrency().containsKey(
           makePurchaseCurrencyList.getItemAt(makePurchaseCurrencyList.getSelectedIndex())))
            {
                makePurchaseLabel.setText("Currency not in card!");
                return;
            }
            
        // Get the current date
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
        Date date = new Date();
        
        // Make a purchase
        if(cards.get(makePurchaseCardList.getSelectedIndex() - 1).makePurchase(
                  date.toString(), makePurchaseCountryTF.getText(), 
                  makePurchaseCurrencyList.getItemAt(makePurchaseCurrencyList.getSelectedIndex()),
                  amount, makePurchaseDescriptionTF.getText()))
        {   
            makePurchaseLabel.setText("Purchase made successfully.");
        }
        else
        {
            makePurchaseLabel.setText("Insufficient funds.");
            return;
        }
        
        // Reset the fields to their default values
        makePurchaseCardList.setSelectedIndex(0);
        makePurchaseCountryTF.setText("Country");
        makePurchaseCurrencyList.setSelectedIndex(0);
        makePurchaseAmountTF.setText("Amount");
        makePurchaseDescriptionTF.setText("Description");
    }//GEN-LAST:event_makePurchaseButtonMouseClicked

    // Set the card list for seeing the purchase history
    private void purchaseHistoryListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseHistoryListMouseEntered
        purchaseHistoryList.setModel(getCardList());
    }//GEN-LAST:event_purchaseHistoryListMouseEntered

    // Get the purchase history for a given card
    private void purchaseHistoryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseHistoryButtonMouseClicked
        // Clear text area
        purchaseHistoryTextArea.setText("");

        // Check the fields are filled in correctly
        if(purchaseHistoryList.getSelectedIndex() == 0)
        {
            purchaseHistoryLabel.setText("Please select a card.");
            return;
        }
        
        // Set the text area to the purchase history of the selected card
        if(cards.get(purchaseHistoryList.getSelectedIndex() - 1).getPurchases().isEmpty())
        {
            purchaseHistoryTextArea.setText("No purchases found.");
            purchaseHistoryLabel.setText("No purchases found.");
        }
        else
        {
            ArrayList<Purchase> temp = cards.get(purchaseHistoryList.getSelectedIndex() - 1).getPurchases();
            String purchases = "";
            for(Purchase p : temp)
            {
                purchases += p.getPurchaseInfo() + "\n";
            }
            purchaseHistoryTextArea.setText(purchases);
            purchaseHistoryLabel.setText("Purchase history found.");
        }
        
        // Reset the fields to their default values
        purchaseHistoryList.setSelectedIndex(0);
    }//GEN-LAST:event_purchaseHistoryButtonMouseClicked

    // Method to populate card lists
    private ComboBoxModel getCardList()
    {
        // Create a temporary list with all cards in it
        ArrayList<String> temp = new ArrayList<>();
        temp.add("Select Card...");
        
        // Add each card to the temp list
        for(Card card : cards)
        {
            temp.add(card.toString());
        }
        
        // Return the combobox model
        return new DefaultComboBoxModel(temp.toArray());
    }
    
    private ComboBoxModel getMultiCardList()
    {
        // Create a temporary list with all multicards in it
        ArrayList<String> temp = new ArrayList<>();
        temp.add("Select Card...");

        // Add each card to the temp list
        for(Card card : multicards)
        {
            temp.add(card.toString());
        }

        // Return the combobox model
        return new DefaultComboBoxModel(temp.toArray()); 
    }
    
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allCardsPanel;
    private javax.swing.JPanel convertCurrency;
    private javax.swing.JPanel createCard;
    private javax.swing.JButton createCardButton;
    private javax.swing.JLabel createCardLabel;
    private javax.swing.JComboBox<String> createCardList;
    private javax.swing.JTextField createCardTextField;
    private javax.swing.JPanel listAllCards;
    private javax.swing.JPanel loadCard;
    private javax.swing.JButton loadCardButton;
    private javax.swing.JLabel loadCardLabel;
    private javax.swing.JComboBox<String> loadCardList;
    private javax.swing.JTextField loadCardTextField;
    private javax.swing.JTabbedPane mainTabPane;
    private javax.swing.JPanel makePurchase;
    private javax.swing.JTextField makePurchaseAmountTF;
    private javax.swing.JButton makePurchaseButton;
    private javax.swing.JComboBox<String> makePurchaseCardList;
    private javax.swing.JTextField makePurchaseCountryTF;
    private javax.swing.JComboBox<String> makePurchaseCurrencyList;
    private javax.swing.JTextField makePurchaseDescriptionTF;
    private javax.swing.JLabel makePurchaseLabel;
    private javax.swing.JTabbedPane multiTabPane;
    private javax.swing.JPanel purchaseHistory;
    private javax.swing.JButton purchaseHistoryButton;
    private javax.swing.JLabel purchaseHistoryLabel;
    private javax.swing.JComboBox<String> purchaseHistoryList;
    private javax.swing.JTextArea purchaseHistoryTextArea;
    private javax.swing.JScrollPane purchaseHistoryTextPane;
    private javax.swing.JPanel showValueAll;
    private javax.swing.JPanel showValueSingle;
    private javax.swing.JPanel singleCardPanel;
    private javax.swing.JTabbedPane singleTabPane;
    private javax.swing.JPanel sp1;
    private javax.swing.JPanel totalByCountryAll;
    private javax.swing.JPanel totalByCountrySingle;
    private javax.swing.JPanel totalByCurrency;
    // End of variables declaration//GEN-END:variables
}
