package assignment;

import java.awt.event.*;
import javax.swing.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.io.*;
import java.nio.*;
import java.nio.file.*;
import java.security.KeyStore;


public class GUI extends JFrame
{
    static ArrayList<Card> cards = new ArrayList<>();
    static ArrayList<MultiCard> multicards = new ArrayList<>();
    
    // Creates new form GUI
    public GUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listCardsButtonGroup = new javax.swing.ButtonGroup();
        mainTabPane = new javax.swing.JTabbedPane();
        singleCardPanel = new javax.swing.JPanel();
        singleTabPane = new javax.swing.JTabbedPane();
        createCard = new javax.swing.JPanel();
        createCardLabel = new javax.swing.JLabel();
        createCardList = new javax.swing.JComboBox<>();
        createCardTextField = new javax.swing.JTextField();
        createCardButton = new javax.swing.JButton();
        loadCard = new javax.swing.JPanel();
        loadCardLabel = new javax.swing.JLabel();
        loadCardList = new javax.swing.JComboBox<>();
        loadCardTextField = new javax.swing.JTextField();
        loadCardButton = new javax.swing.JButton();
        convertCurrency = new javax.swing.JPanel();
        convertCurrencyCardList = new javax.swing.JComboBox<>();
        convertCurrencyTextField = new javax.swing.JTextField();
        convertCurrencyCurList = new javax.swing.JComboBox<>();
        convertCurrencyButton = new javax.swing.JButton();
        convertCurrencyLabel = new javax.swing.JLabel();
        makePurchase = new javax.swing.JPanel();
        makePurchaseLabel = new javax.swing.JLabel();
        makePurchaseCardList = new javax.swing.JComboBox<>();
        makePurchaseCountryTF = new javax.swing.JTextField();
        makePurchaseCurrencyList = new javax.swing.JComboBox<>();
        makePurchaseAmountTF = new javax.swing.JTextField();
        makePurchaseDescriptionTF = new javax.swing.JTextField();
        makePurchaseButton = new javax.swing.JButton();
        purchaseHistory = new javax.swing.JPanel();
        purchaseHistoryLabel = new javax.swing.JLabel();
        purchaseHistoryList = new javax.swing.JComboBox<>();
        purchaseHistoryButton = new javax.swing.JButton();
        purchaseHistoryTextPane = new javax.swing.JScrollPane();
        purchaseHistoryTextArea = new javax.swing.JTextArea();
        totalByCountrySingle = new javax.swing.JPanel();
        totalByCountryLabel = new javax.swing.JLabel();
        totalByCountryList = new javax.swing.JComboBox<>();
        totalByCountryButton = new javax.swing.JButton();
        totalByCountryTextPane = new javax.swing.JScrollPane();
        totalByCountryTextArea = new javax.swing.JTextArea();
        showValueSingle = new javax.swing.JPanel();
        showValueLabel = new javax.swing.JLabel();
        showValueList = new javax.swing.JComboBox<>();
        showValueButton = new javax.swing.JButton();
        showValueTextPane = new javax.swing.JScrollPane();
        showValueTextArea = new javax.swing.JTextArea();
        allCardsPanel = new javax.swing.JPanel();
        multiTabPane = new javax.swing.JTabbedPane();
        showValueAll = new javax.swing.JPanel();
        showValueAllLabel2 = new javax.swing.JLabel();
        showValueAllButton = new javax.swing.JButton();
        showValueAllLabel1 = new javax.swing.JLabel();
        totalByCurrency = new javax.swing.JPanel();
        totalByCurrencyAllLabel = new javax.swing.JLabel();
        totalByCurrencyAllButton = new javax.swing.JButton();
        totalByCurrencyAllTextPane = new javax.swing.JScrollPane();
        totalByCurrencyAllTextArea = new javax.swing.JTextArea();
        totalByCountryAll = new javax.swing.JPanel();
        totalByCountryAllLabel = new javax.swing.JLabel();
        totalByCountryAllButton = new javax.swing.JButton();
        totalByCountryAllTextPane = new javax.swing.JScrollPane();
        totalByCountryAllTextArea = new javax.swing.JTextArea();
        listAllCards = new javax.swing.JPanel();
        listCardsLabel = new javax.swing.JLabel();
        listCardsButton = new javax.swing.JButton();
        listCardsRadioButton1 = new javax.swing.JRadioButton();
        listCardsRadioButton2 = new javax.swing.JRadioButton();
        listCardsTextPane = new javax.swing.JScrollPane();
        listCardsTextArea = new javax.swing.JTextArea();

        setTitle("Card Program");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        mainTabPane.setPreferredSize(new java.awt.Dimension(775, 600));

        createCardLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        createCardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createCardLabel.setText("Create A New Card");

        createCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card Type...", "Basic Card", "Multi Card" }));

        createCardTextField.setText("Name");

        createCardButton.setText("Create Card");
        createCardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createCardButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout createCardLayout = new javax.swing.GroupLayout(createCard);
        createCard.setLayout(createCardLayout);
        createCardLayout.setHorizontalGroup(
            createCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createCardLayout.createSequentialGroup()
                .addContainerGap(234, Short.MAX_VALUE)
                .addGroup(createCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createCardTextField)
                    .addComponent(createCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(createCardLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        createCardLayout.setVerticalGroup(
            createCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createCardLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(createCardLabel)
                .addGap(73, 73, 73)
                .addComponent(createCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createCardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createCardButton)
                .addContainerGap(293, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Create Card", createCard);

        loadCardLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        loadCardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadCardLabel.setText("Load a Card");

        loadCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        loadCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loadCardListMouseEntered(evt);
            }
        });

        loadCardTextField.setText("Amount");

        loadCardButton.setText("Load Funds");
        loadCardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadCardButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout loadCardLayout = new javax.swing.GroupLayout(loadCard);
        loadCard.setLayout(loadCardLayout);
        loadCardLayout.setHorizontalGroup(
            loadCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadCardLayout.createSequentialGroup()
                .addContainerGap(234, Short.MAX_VALUE)
                .addGroup(loadCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loadCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadCardTextField)
                    .addComponent(loadCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(loadCardLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        loadCardLayout.setVerticalGroup(
            loadCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadCardLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(loadCardLabel)
                .addGap(73, 73, 73)
                .addComponent(loadCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadCardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadCardButton)
                .addContainerGap(293, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Load Card", loadCard);

        convertCurrencyCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        convertCurrencyCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                convertCurrencyCardListMouseEntered(evt);
            }
        });

        convertCurrencyTextField.setText("Amount");

        convertCurrencyCurList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Currency...", "AUD", "NZD", "USD", "CAD", "GBP", "JPY", "EUR" }));

        convertCurrencyButton.setText("Convert Currency");
        convertCurrencyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                convertCurrencyButtonMouseClicked(evt);
            }
        });

        convertCurrencyLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        convertCurrencyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        convertCurrencyLabel.setText("Convert Currency");

        javax.swing.GroupLayout convertCurrencyLayout = new javax.swing.GroupLayout(convertCurrency);
        convertCurrency.setLayout(convertCurrencyLayout);
        convertCurrencyLayout.setHorizontalGroup(
            convertCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(convertCurrencyLayout.createSequentialGroup()
                .addContainerGap(234, Short.MAX_VALUE)
                .addGroup(convertCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(convertCurrencyCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(convertCurrencyTextField)
                    .addComponent(convertCurrencyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(convertCurrencyCurList, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(234, Short.MAX_VALUE))
            .addGroup(convertCurrencyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(convertCurrencyLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        convertCurrencyLayout.setVerticalGroup(
            convertCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(convertCurrencyLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(convertCurrencyLabel)
                .addGap(18, 18, 18)
                .addComponent(convertCurrencyCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(convertCurrencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(convertCurrencyCurList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(convertCurrencyButton)
                .addContainerGap(255, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Convert Currency", convertCurrency);

        makePurchaseLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        makePurchaseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        makePurchaseLabel.setText("Make a Purchase");

        makePurchaseCardList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        makePurchaseCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                makePurchaseCardListMouseEntered(evt);
            }
        });

        makePurchaseCountryTF.setText("Country");

        makePurchaseCurrencyList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Currency...", "AUD", "USD", "NZD", "GBP", "JPY", "CAD", "EUR" }));

        makePurchaseAmountTF.setText("Amount");

        makePurchaseDescriptionTF.setText("Description");

        makePurchaseButton.setText("Make Purchase");
        makePurchaseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                makePurchaseButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout makePurchaseLayout = new javax.swing.GroupLayout(makePurchase);
        makePurchase.setLayout(makePurchaseLayout);
        makePurchaseLayout.setHorizontalGroup(
            makePurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(makePurchaseLayout.createSequentialGroup()
                .addContainerGap(234, Short.MAX_VALUE)
                .addGroup(makePurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(makePurchaseCardList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(makePurchaseCountryTF)
                    .addComponent(makePurchaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(makePurchaseAmountTF)
                    .addComponent(makePurchaseCurrencyList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(makePurchaseDescriptionTF)
                    .addComponent(makePurchaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        makePurchaseLayout.setVerticalGroup(
            makePurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(makePurchaseLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(makePurchaseLabel)
                .addGap(73, 73, 73)
                .addComponent(makePurchaseCardList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseCountryTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseCurrencyList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseDescriptionTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(makePurchaseButton)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Make Purchase", makePurchase);

        purchaseHistoryLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        purchaseHistoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        purchaseHistoryLabel.setText("See Purchase History");

        purchaseHistoryList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        purchaseHistoryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                purchaseHistoryListMouseEntered(evt);
            }
        });

        purchaseHistoryButton.setText("Get Purchase History");
        purchaseHistoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseHistoryButtonMouseClicked(evt);
            }
        });

        purchaseHistoryTextArea.setColumns(20);
        purchaseHistoryTextArea.setRows(5);
        purchaseHistoryTextPane.setViewportView(purchaseHistoryTextArea);

        javax.swing.GroupLayout purchaseHistoryLayout = new javax.swing.GroupLayout(purchaseHistory);
        purchaseHistory.setLayout(purchaseHistoryLayout);
        purchaseHistoryLayout.setHorizontalGroup(
            purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, purchaseHistoryLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(purchaseHistoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(purchaseHistoryTextPane, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(purchaseHistoryList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(purchaseHistoryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(234, 234, 234))
        );
        purchaseHistoryLayout.setVerticalGroup(
            purchaseHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(purchaseHistoryLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(purchaseHistoryLabel)
                .addGap(73, 73, 73)
                .addComponent(purchaseHistoryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(purchaseHistoryButton)
                .addGap(18, 18, 18)
                .addComponent(purchaseHistoryTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Purchase History", purchaseHistory);

        totalByCountryLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalByCountryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalByCountryLabel.setText("See Total Spent by Country");

        totalByCountryList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        totalByCountryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                totalByCountryListMouseEntered(evt);
            }
        });

        totalByCountryButton.setText("Get Total Spent by Country");
        totalByCountryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalByCountryButtonMouseClicked(evt);
            }
        });

        totalByCountryTextArea.setColumns(20);
        totalByCountryTextArea.setRows(5);
        totalByCountryTextPane.setViewportView(totalByCountryTextArea);

        javax.swing.GroupLayout totalByCountrySingleLayout = new javax.swing.GroupLayout(totalByCountrySingle);
        totalByCountrySingle.setLayout(totalByCountrySingleLayout);
        totalByCountrySingleLayout.setHorizontalGroup(
            totalByCountrySingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, totalByCountrySingleLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(totalByCountrySingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalByCountryTextPane, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(totalByCountryList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalByCountryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(234, 234, 234))
            .addGroup(totalByCountrySingleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalByCountryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        totalByCountrySingleLayout.setVerticalGroup(
            totalByCountrySingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalByCountrySingleLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(totalByCountryLabel)
                .addGap(73, 73, 73)
                .addComponent(totalByCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(totalByCountryButton)
                .addGap(18, 18, 18)
                .addComponent(totalByCountryTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Total Spent by Country", totalByCountrySingle);

        showValueLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        showValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showValueLabel.setText("See Value for Selected Card");

        showValueList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Card...", " " }));
        showValueList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showValueListMouseEntered(evt);
            }
        });

        showValueButton.setText("Get the Value for the Selected Card");
        showValueButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showValueButtonMouseClicked(evt);
            }
        });

        showValueTextArea.setColumns(20);
        showValueTextArea.setRows(5);
        showValueTextPane.setViewportView(showValueTextArea);

        javax.swing.GroupLayout showValueSingleLayout = new javax.swing.GroupLayout(showValueSingle);
        showValueSingle.setLayout(showValueSingleLayout);
        showValueSingleLayout.setHorizontalGroup(
            showValueSingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showValueSingleLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(showValueSingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(showValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showValueTextPane)
                    .addComponent(showValueList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showValueButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(234, 234, 234))
        );
        showValueSingleLayout.setVerticalGroup(
            showValueSingleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showValueSingleLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(showValueLabel)
                .addGap(73, 73, 73)
                .addComponent(showValueList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(showValueButton)
                .addGap(18, 18, 18)
                .addComponent(showValueTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        singleTabPane.addTab("Show Value", showValueSingle);

        javax.swing.GroupLayout singleCardPanelLayout = new javax.swing.GroupLayout(singleCardPanel);
        singleCardPanel.setLayout(singleCardPanelLayout);
        singleCardPanelLayout.setHorizontalGroup(
            singleCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(singleCardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(singleTabPane)
                .addContainerGap())
        );
        singleCardPanelLayout.setVerticalGroup(
            singleCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(singleCardPanelLayout.createSequentialGroup()
                .addComponent(singleTabPane)
                .addContainerGap())
        );

        mainTabPane.addTab("Single Card", singleCardPanel);

        showValueAllLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        showValueAllLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showValueAllLabel2.setText("Total Value of Cards: $0.00 AUD");

        showValueAllButton.setText("Get Total Value for all Cards");
        showValueAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showValueAllButtonMouseClicked(evt);
            }
        });

        showValueAllLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        showValueAllLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showValueAllLabel1.setText("See Total Value for All Cards");

        javax.swing.GroupLayout showValueAllLayout = new javax.swing.GroupLayout(showValueAll);
        showValueAll.setLayout(showValueAllLayout);
        showValueAllLayout.setHorizontalGroup(
            showValueAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showValueAllLayout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addGroup(showValueAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(showValueAllLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showValueAllButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(234, Short.MAX_VALUE))
            .addGroup(showValueAllLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showValueAllLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        showValueAllLayout.setVerticalGroup(
            showValueAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showValueAllLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(showValueAllLabel1)
                .addGap(73, 73, 73)
                .addComponent(showValueAllButton)
                .addGap(73, 73, 73)
                .addComponent(showValueAllLabel2)
                .addContainerGap(285, Short.MAX_VALUE))
        );

        multiTabPane.addTab("Total Value", showValueAll);

        totalByCurrencyAllLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalByCurrencyAllLabel.setText("See Total by Currency for all Cards");

        totalByCurrencyAllButton.setText("Get Total by Currency for all Cards");
        totalByCurrencyAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalByCurrencyAllButtonMouseClicked(evt);
            }
        });

        totalByCurrencyAllTextArea.setColumns(20);
        totalByCurrencyAllTextArea.setRows(5);
        totalByCurrencyAllTextPane.setViewportView(totalByCurrencyAllTextArea);

        javax.swing.GroupLayout totalByCurrencyLayout = new javax.swing.GroupLayout(totalByCurrency);
        totalByCurrency.setLayout(totalByCurrencyLayout);
        totalByCurrencyLayout.setHorizontalGroup(
            totalByCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, totalByCurrencyLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(totalByCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalByCurrencyAllTextPane)
                    .addComponent(totalByCurrencyAllButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addGap(234, 234, 234))
            .addGroup(totalByCurrencyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalByCurrencyAllLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        totalByCurrencyLayout.setVerticalGroup(
            totalByCurrencyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalByCurrencyLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(totalByCurrencyAllLabel)
                .addGap(73, 73, 73)
                .addComponent(totalByCurrencyAllButton)
                .addGap(18, 18, 18)
                .addComponent(totalByCurrencyAllTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        multiTabPane.addTab("Total by Currency", totalByCurrency);

        totalByCountryAllLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalByCountryAllLabel.setText("See Total spent by Country for all Cards");

        totalByCountryAllButton.setText("Get Total Spent by Country for all Cards");
        totalByCountryAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalByCountryAllButtonMouseClicked(evt);
            }
        });

        totalByCountryAllTextArea.setColumns(20);
        totalByCountryAllTextArea.setRows(5);
        totalByCountryAllTextPane.setViewportView(totalByCountryAllTextArea);

        javax.swing.GroupLayout totalByCountryAllLayout = new javax.swing.GroupLayout(totalByCountryAll);
        totalByCountryAll.setLayout(totalByCountryAllLayout);
        totalByCountryAllLayout.setHorizontalGroup(
            totalByCountryAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, totalByCountryAllLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(totalByCountryAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalByCountryAllTextPane)
                    .addComponent(totalByCountryAllButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addGap(234, 234, 234))
            .addGroup(totalByCountryAllLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalByCountryAllLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        totalByCountryAllLayout.setVerticalGroup(
            totalByCountryAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalByCountryAllLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(totalByCountryAllLabel)
                .addGap(73, 73, 73)
                .addComponent(totalByCountryAllButton)
                .addGap(18, 18, 18)
                .addComponent(totalByCountryAllTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        multiTabPane.addTab("Total Spent by Country", totalByCountryAll);

        listCardsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listCardsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listCardsLabel.setText("List all Cards");

        listCardsButton.setText("List all Cards by Selected Order");
        listCardsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listCardsButtonMouseClicked(evt);
            }
        });

        listCardsButtonGroup.add(listCardsRadioButton1);
        listCardsRadioButton1.setSelected(true);
        listCardsRadioButton1.setText("by Order Created");

        listCardsButtonGroup.add(listCardsRadioButton2);
        listCardsRadioButton2.setText("by Value");

        listCardsTextArea.setColumns(20);
        listCardsTextArea.setRows(5);
        listCardsTextPane.setViewportView(listCardsTextArea);

        javax.swing.GroupLayout listAllCardsLayout = new javax.swing.GroupLayout(listAllCards);
        listAllCards.setLayout(listAllCardsLayout);
        listAllCardsLayout.setHorizontalGroup(
            listAllCardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listAllCardsLayout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(listAllCardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listAllCardsLayout.createSequentialGroup()
                        .addComponent(listCardsRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(listCardsRadioButton2))
                    .addComponent(listCardsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(listCardsTextPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(listCardsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(234, 234, 234))
        );
        listAllCardsLayout.setVerticalGroup(
            listAllCardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listAllCardsLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(listCardsLabel)
                .addGap(73, 73, 73)
                .addGroup(listAllCardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listCardsRadioButton1)
                    .addComponent(listCardsRadioButton2))
                .addGap(18, 18, 18)
                .addComponent(listCardsButton)
                .addGap(18, 18, 18)
                .addComponent(listCardsTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        multiTabPane.addTab("List All Cards", listAllCards);

        javax.swing.GroupLayout allCardsPanelLayout = new javax.swing.GroupLayout(allCardsPanel);
        allCardsPanel.setLayout(allCardsPanelLayout);
        allCardsPanelLayout.setHorizontalGroup(
            allCardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allCardsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(multiTabPane)
                .addContainerGap())
        );
        allCardsPanelLayout.setVerticalGroup(
            allCardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(multiTabPane)
        );

        mainTabPane.addTab("All Cards", allCardsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Method to create a card when button clicked
    private void createCardButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createCardButtonMouseClicked
        // Check if all fields have correct information in them
        if(createCardList.getSelectedIndex() != 0)
        {
            if(createCardTextField.getText().equals("Name") || 
               createCardTextField.getText().equals(""))
            {
                createCardLabel.setText("Please enter a card name.");
                return;
            }
        }
        else
        {
            createCardLabel.setText("Please select a card type.");
            return;
        }
        
        // Create a card based upon the selected card type in the combo box
        if(createCardList.getSelectedIndex() == 1)
        {
            BasicCard bc = new BasicCard("C001", createCardTextField.getText());
            createCardLabel.setText("Card successfully created!");
            cards.add(bc);
        }
        else
        {
            MultiCard mc = new MultiCard("C001", createCardTextField.getText());
            createCardLabel.setText("Card successfully created!");
            cards.add(mc);
            multicards.add(mc);
        }
        
        // Set the text field and combo box back to their original values
        createCardList.setSelectedIndex(0);
        createCardTextField.setText("Name");
    }//GEN-LAST:event_createCardButtonMouseClicked

    // Method to add funds to a card when button clicked
    private void loadCardButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadCardButtonMouseClicked
        // Check if the fields have been filled out correctly
        if(loadCardList.getSelectedIndex() == 0)
        {
            loadCardLabel.setText("Please select a card.");
            return;
        }
        else
        {
            if(loadCardTextField.getText().equals("Amount") || 
               loadCardTextField.getText().equals(""))
            {
                loadCardLabel.setText("Please enter amount.");
                return;
            }
        }
        
        // Try to convert the entered amount to a double
        double amount = 0;
        try
        {
            amount = Double.parseDouble(loadCardTextField.getText());
        }
        catch(Exception e)
        {
            loadCardLabel.setText("Amount entered not valid!");
            return;
        }
        
        // Load the card with the given amount
        cards.get(loadCardList.getSelectedIndex() - 1).addFunds(amount);
        loadCardLabel.setText("Funds successfully added!");
        
        // Reset the fields to their default values
        loadCardTextField.setText("Amount");
        loadCardList.setSelectedIndex(0);
    }//GEN-LAST:event_loadCardButtonMouseClicked

    // Set the card list for adding funds
    private void loadCardListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadCardListMouseEntered
        loadCardList.setModel(getCardList());
    }//GEN-LAST:event_loadCardListMouseEntered

    // Set the card list for making a purchase
    private void makePurchaseCardListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makePurchaseCardListMouseEntered
        makePurchaseCardList.setModel(getCardList());
    }//GEN-LAST:event_makePurchaseCardListMouseEntered

    // Make a purchase
    private void makePurchaseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makePurchaseButtonMouseClicked
        // Check if the fields are filled in correctly
        if(makePurchaseCardList.getSelectedIndex() == 0)
        {
            makePurchaseLabel.setText("Please select a card.");
            return;
        }
        
        if(makePurchaseCountryTF.getText().equals("Country") || 
           makePurchaseCountryTF.getText().equals(""))
        {
            makePurchaseLabel.setText("Please enter country.");
            return;
        }
        
        if(makePurchaseCurrencyList.getSelectedIndex() == 0)
        {
            makePurchaseLabel.setText("Please select a currency.");
            return;
        }
        
        if(makePurchaseAmountTF.getText().equals("Amount") || 
           makePurchaseAmountTF.getText().equals(""))
        {
            makePurchaseLabel.setText("Please enter amount.");
            return;
        }
        
        if(makePurchaseDescriptionTF.getText().equals("Description") || 
           makePurchaseDescriptionTF.getText().equals(""))
        {
            makePurchaseLabel.setText("Please enter description.");
            return;
        }
        
        // Try to convert the entered amount to a double
        double amount = 0;
        try
        {
            amount = Double.parseDouble(makePurchaseAmountTF.getText());
        }
        catch(Exception e)
        {
            makePurchaseLabel.setText("Amount entered not valid!");
            return;
        }
        
        // Check if card is multi
        if(cards.get(makePurchaseCardList.getSelectedIndex() - 1).isMulticard())
        {
            // Check if the selected currency is in the card
            if(!cards.get(makePurchaseCardList.getSelectedIndex() - 1).getTotalOfEachCurrency().containsKey(
            makePurchaseCurrencyList.getItemAt(makePurchaseCurrencyList.getSelectedIndex())))
            {
                makePurchaseLabel.setText("Currency not in card!");
                return;
            }
        }
        
        // Get the current date
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
        Date date = new Date();
        
        // Make a purchase
        if(cards.get(makePurchaseCardList.getSelectedIndex() - 1).makePurchase(
                  formatter.format(date), makePurchaseCountryTF.getText(), 
                  makePurchaseCurrencyList.getItemAt(makePurchaseCurrencyList.getSelectedIndex()),
                  amount, makePurchaseDescriptionTF.getText()))
        {   
            makePurchaseLabel.setText("Purchase made successfully.");
        }
        else
        {
            makePurchaseLabel.setText("Insufficient funds.");
            return;
        }
        
        // Reset the fields to their default values
        makePurchaseCardList.setSelectedIndex(0);
        makePurchaseCountryTF.setText("Country");
        makePurchaseCurrencyList.setSelectedIndex(0);
        makePurchaseAmountTF.setText("Amount");
        makePurchaseDescriptionTF.setText("Description");
    }//GEN-LAST:event_makePurchaseButtonMouseClicked

    // Set the card list for seeing the purchase history
    private void purchaseHistoryListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseHistoryListMouseEntered
        purchaseHistoryList.setModel(getCardList());
    }//GEN-LAST:event_purchaseHistoryListMouseEntered

    // Get the purchase history for a given card
    private void purchaseHistoryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseHistoryButtonMouseClicked
        // Clear text area
        purchaseHistoryTextArea.setText("");

        // Check the fields are filled in correctly
        if(purchaseHistoryList.getSelectedIndex() == 0)
        {
            purchaseHistoryLabel.setText("Please select a card.");
            return;
        }
        
        // Set the text area to the purchase history of the selected card
        if(cards.get(purchaseHistoryList.getSelectedIndex() - 1).getPurchases().isEmpty())
        {
            purchaseHistoryTextArea.setText("No purchases found.");
            purchaseHistoryLabel.setText("No purchases found.");
        }
        else
        {
            ArrayList<Purchase> temp = cards.get(purchaseHistoryList.getSelectedIndex() - 1).getPurchases();
            String purchases = "";
            for(Purchase p : temp)
            {
                purchases += p.getPurchaseInfo() + "\n";
            }
            purchaseHistoryTextArea.setText(purchases);
            purchaseHistoryLabel.setText("Purchase history found.");
        }
        
        // Reset the fields to their default values
        purchaseHistoryList.setSelectedIndex(0);
    }//GEN-LAST:event_purchaseHistoryButtonMouseClicked

    // Set the card list for getting the total spent by country
    private void totalByCountryListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalByCountryListMouseEntered
        totalByCountryList.setModel(getCardList());
    }//GEN-LAST:event_totalByCountryListMouseEntered

    // Get the total spent by country for a given card
    private void totalByCountryButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalByCountryButtonMouseClicked
        // Create variables needed for function
        ArrayList<String> countriesSpentIn = new ArrayList<String>();
        ArrayList<Purchase> temp;
        double[] amountSpentInCountry = new double[10];
        
        // Clear text area
        totalByCountryTextArea.setText("");

        // Check the fields are filled in correctly
        if(totalByCountryList.getSelectedIndex() == 0)
        {
            totalByCountryTextArea.setText("No purchases found.");
            totalByCountryLabel.setText("No purchases found.");
            return;
        }
        
        temp = cards.get(totalByCountryList.getSelectedIndex() - 1).getPurchases();

        // Check if purchases have been made
        if(temp.isEmpty())
        {
            totalByCountryTextArea.setText("No purchases found for card.");
            return;
        }
        
        // Loop over each purchase on the card
        for(Purchase p : temp)
        {
            // Check if the country the purchase was made in is in the list
            if (countriesSpentIn.contains(p.getCountry()))
            {
                amountSpentInCountry[countriesSpentIn.indexOf(p.getCountry())] += p.getAmount();
            }
            // Otherwise, add the country to the list and increase the amount spent in it
            else
            {
                countriesSpentIn.add(p.getCountry());
                amountSpentInCountry[countriesSpentIn.indexOf(p.getCountry())] += p.getAmount();
            }
        }

        // Format the result for displaying
        String result = "";
        for(String country : countriesSpentIn)
        {
            result += String.format("%s: %.2f\n",
              country, amountSpentInCountry[countriesSpentIn.indexOf(country)]);
        }
        
        totalByCountryTextArea.setText(result);
        totalByCountryLabel.setText("Results found.");
        
        // Reset the fields to their default values
        totalByCountryList.setSelectedIndex(0);
    }//GEN-LAST:event_totalByCountryButtonMouseClicked

    // Update the list of cards for getting the value of said card
    private void showValueListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showValueListMouseEntered
        showValueList.setModel(getCardList());
    }//GEN-LAST:event_showValueListMouseEntered

    // Get the total value of the card selected
    private void showValueButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showValueButtonMouseClicked
        // Clear text area
        showValueTextArea.setText("");

        // Check the fields are filled in correctly
        if(showValueList.getSelectedIndex() == 0)
        {
            showValueLabel.setText("Please select a card.");
            return;
        }
        
        // Set the text area to the total spent/country of the selected card
        HashMap<String,Double> currencies;
        currencies = cards.get(showValueList.getSelectedIndex() - 1).getTotalOfEachCurrency();
        
        String totalOfEach = "--Total Balance Per Currency--\n";
        
        for(HashMap.Entry<String,Double> item : currencies.entrySet())
        {
            totalOfEach += String.format("%s: %.2f\n", item.getKey(), item.getValue());
        }
        
        totalOfEach += String.format("\n\n--Total Value of Card--\n $%.2f AUD",
                cards.get(showValueList.getSelectedIndex() - 1).getBalance());
        
        showValueTextArea.setText(totalOfEach);
        showValueLabel.setText("Value of card found.");
        
        // Reset the fields to their default values
        showValueList.setSelectedIndex(0);
    }//GEN-LAST:event_showValueButtonMouseClicked

    // Get the total value for all cards
    private void showValueAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showValueAllButtonMouseClicked
        // Check if there are cards
        if(cards.size() < 1)
        {
            showValueAllLabel1.setText("No cards found!");
            return;
        }
        
        // Get the value of all cards
        double total = 0;
        
        // Loop through each card and get its balance
        for(Card card : cards)
        {
            total += card.getBalance();
        }
        
        showValueAllLabel1.setText("Total value of all cards found!");
        showValueAllLabel2.setText(String.format("Total Value of Cards: $%.2f AUD", total));
    }//GEN-LAST:event_showValueAllButtonMouseClicked

    // Get tht total values of each currency in all cards
    private void totalByCurrencyAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalByCurrencyAllButtonMouseClicked
        // Check if there are cards added to the program
        if(cards.size() < 1)
        {
            totalByCurrencyAllLabel.setText("No cards found!");
            return;
        }
        
        // Clear text area
        totalByCurrencyAllTextArea.setText("");
        
        // Loop through each card
        HashMap<String,Double> currencies = new HashMap<>();
        for(Card card : cards)
        {
            // Loop through each item in the card's balances
            HashMap<String, Double> temp = card.getTotalOfEachCurrency();
            for(HashMap.Entry<String, Double> item : temp.entrySet())
            {
                if(currencies.containsKey(item.getKey()))
                {
                    currencies.put(item.getKey(), currencies.get(item.getKey()) + item.getValue());
                }
                else
                {
                    currencies.put(item.getKey(), item.getValue());
                }
            }
        }
        
        // Set text area to total of each currency for all cards
        String totalOfEach = "--Total Balance Per Currency--\n";
        
        for(HashMap.Entry<String,Double> item : currencies.entrySet())
        {
            totalOfEach += String.format("%s: %.2f\n", item.getKey(), item.getValue());
        }
        
        totalByCurrencyAllLabel.setText("Total by currency for all cards found!");
        totalByCurrencyAllTextArea.setText(totalOfEach);
    }//GEN-LAST:event_totalByCurrencyAllButtonMouseClicked

    // See total spent by country for all cards
    private void totalByCountryAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalByCountryAllButtonMouseClicked
        // Check if cards have been added to the program
        if(cards.size() < 1)
        {
            totalByCountryAllLabel.setText("No cards found!");
            return;
        }
        
        // Create variables needed for function
        ArrayList<String> countriesSpentIn = new ArrayList<String>();
        ArrayList<Purchase> temp;
        double[] amountSpentInCountry = new double[10];
        
        // Clear text area
        totalByCountryAllTextArea.setText("");
        
        for(Card card : cards)
        {
            temp = card.getPurchases();
            // Check if purchases have been made in card
            if(temp.isEmpty())
            {
                continue;
            }
            
            // Loop over each purchase on the card
            for(Purchase p : temp)
            {
                // Check if the country the purchase was made in is in the list
                if (countriesSpentIn.contains(p.getCountry()))
                {
                    amountSpentInCountry[countriesSpentIn.indexOf(p.getCountry())] += p.getAmount();
                }
                // Otherwise, add the country to the list and increase the amount spent in it
                else
                {
                    countriesSpentIn.add(p.getCountry());
                    amountSpentInCountry[countriesSpentIn.indexOf(p.getCountry())] += p.getAmount();
                }
            }
        }
        
        // Format the result for displaying
        String result = "--Total Spent by Country for all Cards--\n";
        for(String country : countriesSpentIn)
        {
            result += String.format("%s: %.2f\n",
              country, amountSpentInCountry[countriesSpentIn.indexOf(country)]);
        }
        
        // Display the result
        totalByCountryAllTextArea.setText(result);
        totalByCountryAllLabel.setText("Results found.");
    }//GEN-LAST:event_totalByCountryAllButtonMouseClicked

    // List all cards by the selected order
    private void listCardsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listCardsButtonMouseClicked
        // Check if there are cards
        if(cards.size() < 1)
        {
            listCardsLabel.setText("No cards found!");
            return;
        }
        
        // Clear text area
        listCardsTextArea.setText("");
        
        // Determine way to order list of cards
        String cardList = "";
        
        if(listCardsRadioButton1.isSelected())
        {
            cardList += "--All Cards Ordered by Creation Asc.--\n";
            for(Card card : cards)
            {
                cardList += String.format("-Card %s-\nName: %s\nValue: $%.2f AUD\n\n",
                        card.getID(), card.getName(), card.getBalance());
            }
        }
        else
        {
            // Create a temporary list of cards and sort them by value
            ArrayList<Card> temp = cards;
            Collections.sort(temp);
            
            cardList += "--All Cards Ordered by Value Asc.--\n";
            
            for(Card card : temp)
            {
                cardList += String.format("-Card %s-\nName: %s\nValue: $%.2f AUD\n\n",
                        card.getID(), card.getName(), card.getBalance());
            }
        }
        
        // Update the GUI to show list of cards
        listCardsTextArea.setText(cardList);
        listCardsLabel.setText("Results found.");
    }//GEN-LAST:event_listCardsButtonMouseClicked

    // Save all data into a text file when the application is closed
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try
        {
            saveData();
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_formWindowClosed

    // Populate the card list for the convert currency tab
    private void convertCurrencyCardListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertCurrencyCardListMouseEntered
        convertCurrencyCardList.setModel(getMultiCardList());
    }//GEN-LAST:event_convertCurrencyCardListMouseEntered

    // Convert currency
    private void convertCurrencyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convertCurrencyButtonMouseClicked
        // Check if the fields are filled in correctly
        if(convertCurrencyCardList.getSelectedIndex() == 0)
        {
            convertCurrencyLabel.setText("Please select a card.");
            return;
        }
        
        if(convertCurrencyTextField.getText().equals("Amount") || 
           convertCurrencyTextField.getText().equals(""))
        {
            convertCurrencyLabel.setText("Please enter an amount.");
            return;
        }
        
        if(convertCurrencyCurList.getSelectedIndex() == 0)
        {
            makePurchaseLabel.setText("Please select a currency.");
            return;
        }
        
        // Try to convert the entered amount to a double
        double amount = 0;
        try
        {
            amount = Double.parseDouble(convertCurrencyTextField.getText());
        }
        catch(Exception e)
        {
            makePurchaseLabel.setText("Amount entered not valid!");
            return;
        }
        
        // Check if the card already has 5 currencies in it
        if(multicards.get(convertCurrencyCardList.getSelectedIndex() - 1).getTotalOfEachCurrency().size() >= 5)
        {
            convertCurrencyLabel.setText("Already 5 currencies in card!");
            return;
        }
        
        // Attempt to convert currencies
        boolean convert = multicards.get(convertCurrencyCardList.getSelectedIndex() - 1).convertCurrency
        (convertCurrencyCurList.getItemAt(convertCurrencyCurList.getSelectedIndex()), amount);
        
        
        if(!convert)
        {
            convertCurrencyLabel.setText("Conversion failed. Insufficient funds.");
            return;
        }
        
        convertCurrencyLabel.setText("Conversion successful!");
        
        // Reset the input fields back to their original values
        convertCurrencyCardList.setSelectedIndex(0);
        convertCurrencyCurList.setSelectedIndex(0);
        convertCurrencyTextField.setText("Amount");
    }//GEN-LAST:event_convertCurrencyButtonMouseClicked

    // Method to populate card lists
    private ComboBoxModel getCardList()
    {
        // Create a temporary list with all cards in it
        ArrayList<String> temp = new ArrayList<>();
        temp.add("Select Card...");
        
        // Add each card to the temp list
        for(Card card : cards)
        {
            temp.add(card.toString());
        }
        
        // Return the combobox model
        return new DefaultComboBoxModel(temp.toArray());
    }
    
    private ComboBoxModel getMultiCardList()
    {
        // Create a temporary list with all multicards in it
        ArrayList<String> temp = new ArrayList<>();
        temp.add("Select Card...");

        // Add each card to the temp list
        for(Card card : multicards)
        {
            temp.add(card.toString());
        }

        // Return the combobox model
        return new DefaultComboBoxModel(temp.toArray()); 
    }
    
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Try open and read the text file
        try
        {
            List<String> fileCards = readSaveFile();
            parseFileInfo(fileCards);
        }
        catch(IOException e)
        {
            System.out.println("Failed to open file");
        }
        
        /* Create and display the form */
        GUI gui = new GUI();
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() {
                gui.setVisible(true);
            }
        });
        
        // Save the program data on close
        try
        {
            saveData();
        }
        catch(IOException e)
        {
            System.out.println(e.getMessage());
        }
        
        // Close the GUI after the user exits the program
        gui.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent e)
            {
                ((JFrame)(e.getComponent())).dispose();
            }
        });
        
    }
    
    // Read the save file, or create it if it does not exist
    public static List<String> readSaveFile() throws IOException
    {
        // Create an absolute file path for the save file
        Path path = FileSystems.getDefault().getPath("cards.txt");
        path = path.toAbsolutePath();
        // Create a new file object based on the path
        File file = new File(path.toString(), "");
        // If the file doesn't exist, make it
        if(!file.exists())
        {
            file.createNewFile();
        }
        
        // Try every line from the file, then close it
        BufferedReader in = new BufferedReader(new FileReader(file));
        
        try
        {
            List<String> fileCards = new ArrayList<>();
            String line = in.readLine();
            while(line != null)
            {
                fileCards.add(line);
                line = in.readLine();
            }
            return fileCards;
        }
        finally
        {
            in.close();
        }
    }
    
    // Parse the info from the save file
    public static void parseFileInfo(List<String> fileCards)
    {
        // If the save file is not empty
        if(!fileCards.isEmpty())
        {
           // Iterate over each line in the file if it has cards in it
            for(String card : fileCards)
            {
                // Clean up the line and split it into a String array
                card = card.trim();
                String[] cardInfo = card.split(",");
                // Check if the card is a BC or MC
                if(cardInfo[0].equals("BC"))
                {
                    // Create new BasicCard object based on saved card info
                    BasicCard tmp = new BasicCard(cardInfo[1], cardInfo[2]);
                    tmp.addFunds(Double.parseDouble(cardInfo[3]));
                    cards.add(tmp);
                    
                    // Check the amount of purchases made
                    int purchasesMade = Integer.parseInt(cardInfo[4]);
                    // Go to the next line/card if there are no purchases in it
                    if(purchasesMade <= 0)
                    {
                        continue;
                    }
                    // Go through each purchase and add it to the card's purchases arraylist
                    for(int i = 5; i <= purchasesMade*5; i+=5)
                    {
                        Purchase p = new Purchase(cardInfo[i], cardInfo[i+1], 
                                cardInfo[i+2], Double.parseDouble(cardInfo[i+3]),
                                cardInfo[i+4]);
                        tmp.addPurchase(p);
                    }
                }
                else if(cardInfo[0].equals("MC"))
                {
                    // Create new MultiCard object based on save card info
                    MultiCard mc = new MultiCard(cardInfo[1], cardInfo[2]);
                    
                    // Check what currencies are in the card and add them to the card's currencies HashMap
                    String[] currencies = {"AUD", "NZD", "USD", "CAD", "GBP", "EUR", "JPY"};
                    int amountOfCurrencies = Integer.parseInt(cardInfo[3]);
                    HashMap<String, Double> tmp = new HashMap<>();
                    
                    // Iterate over each currency stored in the saved record
                    for(int i=4;i<4+(amountOfCurrencies*2); i+=2)
                    {
                        tmp.put(cardInfo[i], Double.parseDouble(cardInfo[i+1]));
                    }
                    
                    // Set the current index for the card record
                    int cardInfoIndex = 4+(amountOfCurrencies*2);
                    
                    // Set the multicard's balances and add it to the program lists
                    mc.setBalancesMap(tmp);
                    cards.add(mc);
                    multicards.add(mc);
                    
                    // Add purchases to the card
                    // Check the amount of purchases made
                    int purchasesMade = Integer.parseInt(cardInfo[cardInfoIndex]);
                    // Go to the next line/card if there are no purchases in it
                    if(purchasesMade <= 0)
                    {
                        continue;
                    }
                    // Go through each purchase and add it to the card's purchases arraylist
                    cardInfoIndex++;
                    for(int i = 0; i < purchasesMade; i++)
                    {
                        Purchase p = new Purchase(cardInfo[cardInfoIndex], cardInfo[cardInfoIndex+1], 
                                cardInfo[cardInfoIndex+2], Double.parseDouble(cardInfo[cardInfoIndex+3]),
                                cardInfo[cardInfoIndex+4]);
                        cardInfoIndex += 5;
                        mc.addPurchase(p);
                    }
                }
                else
                {
                    System.out.println("Error with card record. Skipping...");
                }
            } 
        }
    }
    
    // Write all info to the save file
    public static void saveData() throws IOException
    {
        // Create an absolute file path for the save file
        Path path = FileSystems.getDefault().getPath("cards.txt");
        path = path.toAbsolutePath();
        // Create a new file object based on the path
        File file = new File(path.toString(), "");
        // If the file doesn't exist, make it
        if(!file.exists())
        {
            file.createNewFile();
        }
        
        // Create the BufferedWriter to save the program data
        BufferedWriter out = new BufferedWriter(new FileWriter(file));
        
        // Clear the file
        out.write("");
        
        // Write each card and its purchases to the save file
        for(Card card : cards)
        {
            // Add info relevant to whether the card is basic or multi to the record
            String record = "";
            if(card.isMulticard())
            {
                record += "MC";
                record += String.format(",%s,%s", card.getID(), card.getName());
                
                // Get the currencies in the multicard and add them to the record
                HashMap<String,Double> tmp = card.getTotalOfEachCurrency();
                record += String.format(",%d", tmp.size());
                for(HashMap.Entry<String,Double> item : tmp.entrySet())
                {
                    record += String.format(",%s,%.2f", item.getKey(), item.getValue());
                }
            }
            else
            {
                record += "BC";
                record += String.format(",%s,%s,%.2f", card.getID(), card.getName(), card.getBalance());
                
            }
            
            // Add the card's purchases to the record
            record += String.format(",%d", card.getPurchases().size());
            if(!card.getPurchases().isEmpty())
            {
                for(Purchase p : card.getPurchases())
                {
                    String purchase = String.format(",%s,%s,%s,%.2f,%s",
                            p.getDate(), p.getCountry(), p.getCurrency(), 
                            p.getAmount(), p.getDescription());
                    record += purchase;
                }
            }
            
            // Write the record to the file
            out.append(record);
            out.newLine();
        }
        
        // Close the file
        out.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allCardsPanel;
    private javax.swing.JPanel convertCurrency;
    private javax.swing.JButton convertCurrencyButton;
    private javax.swing.JComboBox<String> convertCurrencyCardList;
    private javax.swing.JComboBox<String> convertCurrencyCurList;
    private javax.swing.JLabel convertCurrencyLabel;
    private javax.swing.JTextField convertCurrencyTextField;
    private javax.swing.JPanel createCard;
    private javax.swing.JButton createCardButton;
    private javax.swing.JLabel createCardLabel;
    private javax.swing.JComboBox<String> createCardList;
    private javax.swing.JTextField createCardTextField;
    private javax.swing.JPanel listAllCards;
    private javax.swing.JButton listCardsButton;
    private javax.swing.ButtonGroup listCardsButtonGroup;
    private javax.swing.JLabel listCardsLabel;
    private javax.swing.JRadioButton listCardsRadioButton1;
    private javax.swing.JRadioButton listCardsRadioButton2;
    private javax.swing.JTextArea listCardsTextArea;
    private javax.swing.JScrollPane listCardsTextPane;
    private javax.swing.JPanel loadCard;
    private javax.swing.JButton loadCardButton;
    private javax.swing.JLabel loadCardLabel;
    private javax.swing.JComboBox<String> loadCardList;
    private javax.swing.JTextField loadCardTextField;
    private javax.swing.JTabbedPane mainTabPane;
    private javax.swing.JPanel makePurchase;
    private javax.swing.JTextField makePurchaseAmountTF;
    private javax.swing.JButton makePurchaseButton;
    private javax.swing.JComboBox<String> makePurchaseCardList;
    private javax.swing.JTextField makePurchaseCountryTF;
    private javax.swing.JComboBox<String> makePurchaseCurrencyList;
    private javax.swing.JTextField makePurchaseDescriptionTF;
    private javax.swing.JLabel makePurchaseLabel;
    private javax.swing.JTabbedPane multiTabPane;
    private javax.swing.JPanel purchaseHistory;
    private javax.swing.JButton purchaseHistoryButton;
    private javax.swing.JLabel purchaseHistoryLabel;
    private javax.swing.JComboBox<String> purchaseHistoryList;
    private javax.swing.JTextArea purchaseHistoryTextArea;
    private javax.swing.JScrollPane purchaseHistoryTextPane;
    private javax.swing.JPanel showValueAll;
    private javax.swing.JButton showValueAllButton;
    private javax.swing.JLabel showValueAllLabel1;
    private javax.swing.JLabel showValueAllLabel2;
    private javax.swing.JButton showValueButton;
    private javax.swing.JLabel showValueLabel;
    private javax.swing.JComboBox<String> showValueList;
    private javax.swing.JPanel showValueSingle;
    private javax.swing.JTextArea showValueTextArea;
    private javax.swing.JScrollPane showValueTextPane;
    private javax.swing.JPanel singleCardPanel;
    private javax.swing.JTabbedPane singleTabPane;
    private javax.swing.JPanel totalByCountryAll;
    private javax.swing.JButton totalByCountryAllButton;
    private javax.swing.JLabel totalByCountryAllLabel;
    private javax.swing.JTextArea totalByCountryAllTextArea;
    private javax.swing.JScrollPane totalByCountryAllTextPane;
    private javax.swing.JButton totalByCountryButton;
    private javax.swing.JLabel totalByCountryLabel;
    private javax.swing.JComboBox<String> totalByCountryList;
    private javax.swing.JPanel totalByCountrySingle;
    private javax.swing.JTextArea totalByCountryTextArea;
    private javax.swing.JScrollPane totalByCountryTextPane;
    private javax.swing.JPanel totalByCurrency;
    private javax.swing.JButton totalByCurrencyAllButton;
    private javax.swing.JLabel totalByCurrencyAllLabel;
    private javax.swing.JTextArea totalByCurrencyAllTextArea;
    private javax.swing.JScrollPane totalByCurrencyAllTextPane;
    // End of variables declaration//GEN-END:variables
}
